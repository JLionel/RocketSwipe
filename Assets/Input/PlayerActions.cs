//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""c010a956-37c5-4804-8cf1-6b6810c41471"",
            ""actions"": [
                {
                    ""name"": ""TouchDetection"",
                    ""type"": ""PassThrough"",
                    ""id"": ""457b4417-ecab-489d-804c-0e8ce8636521"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bad5c211-e6e9-4bad-a2fe-51e2509413b5"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchDetection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Data"",
            ""id"": ""247d4f24-1c68-4a14-a7d3-fc7579a217a9"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""aa641a6f-7c89-4f9f-9a1f-eaa5f21b634e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PhoneAcceleration"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f086a830-1dd8-4329-9e1f-fb214bdba658"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8352e83b-103e-4431-b9db-dc56e6918d06"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfad778e-dac1-4d51-8a08-369421e15371"",
                    ""path"": ""<Accelerometer>/acceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PhoneAcceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_TouchDetection = m_Actions.FindAction("TouchDetection", throwIfNotFound: true);
        // Data
        m_Data = asset.FindActionMap("Data", throwIfNotFound: true);
        m_Data_TouchPosition = m_Data.FindAction("TouchPosition", throwIfNotFound: true);
        m_Data_PhoneAcceleration = m_Data.FindAction("PhoneAcceleration", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actions
    private readonly InputActionMap m_Actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_Actions_TouchDetection;
    public struct ActionsActions
    {
        private @PlayerActions m_Wrapper;
        public ActionsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchDetection => m_Wrapper.m_Actions_TouchDetection;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @TouchDetection.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTouchDetection;
                @TouchDetection.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTouchDetection;
                @TouchDetection.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTouchDetection;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchDetection.started += instance.OnTouchDetection;
                @TouchDetection.performed += instance.OnTouchDetection;
                @TouchDetection.canceled += instance.OnTouchDetection;
            }
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);

    // Data
    private readonly InputActionMap m_Data;
    private IDataActions m_DataActionsCallbackInterface;
    private readonly InputAction m_Data_TouchPosition;
    private readonly InputAction m_Data_PhoneAcceleration;
    public struct DataActions
    {
        private @PlayerActions m_Wrapper;
        public DataActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_Data_TouchPosition;
        public InputAction @PhoneAcceleration => m_Wrapper.m_Data_PhoneAcceleration;
        public InputActionMap Get() { return m_Wrapper.m_Data; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DataActions set) { return set.Get(); }
        public void SetCallbacks(IDataActions instance)
        {
            if (m_Wrapper.m_DataActionsCallbackInterface != null)
            {
                @TouchPosition.started -= m_Wrapper.m_DataActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_DataActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_DataActionsCallbackInterface.OnTouchPosition;
                @PhoneAcceleration.started -= m_Wrapper.m_DataActionsCallbackInterface.OnPhoneAcceleration;
                @PhoneAcceleration.performed -= m_Wrapper.m_DataActionsCallbackInterface.OnPhoneAcceleration;
                @PhoneAcceleration.canceled -= m_Wrapper.m_DataActionsCallbackInterface.OnPhoneAcceleration;
            }
            m_Wrapper.m_DataActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @PhoneAcceleration.started += instance.OnPhoneAcceleration;
                @PhoneAcceleration.performed += instance.OnPhoneAcceleration;
                @PhoneAcceleration.canceled += instance.OnPhoneAcceleration;
            }
        }
    }
    public DataActions @Data => new DataActions(this);
    public interface IActionsActions
    {
        void OnTouchDetection(InputAction.CallbackContext context);
    }
    public interface IDataActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnPhoneAcceleration(InputAction.CallbackContext context);
    }
}
